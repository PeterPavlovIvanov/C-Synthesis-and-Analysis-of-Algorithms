#include <iostream>
#include <vector>
#include <algorithm>
#include <stdlib.h>
#include <time.h>
#include <iterator>
#include <list>
#include <functional>
#include <numeric>
using namespace std;

int squareUp(int n) {
    return n * n;
}

int main() {
    srand((unsigned int)time(NULL));
    vector<int> v1;
    vector<int>::iterator it;
    ostream_iterator<int> out_it(cout, ", ");
    for (int i = 0; i < 10; i++) {
        v1.push_back(rand() % 10);
    }
    copy(v1.begin(), v1.end(), out_it);

    cout << endl;

    vector<int> v2(10);
    transform(v1.begin(), v1.end(), v2.begin(), squareUp);
    copy(v2.begin(), v2.end(), out_it);
    
    cout << endl;

    list<int> l1;
    for (int i = 0; i < v1.size(); i++) {
        l1.push_back(v1[i]);
    }
    l1.sort();
    l1.reverse();
    copy(l1.begin(), l1.end(), out_it);

    cout << endl;

    vector<int> v3(10);
    remove_copy(v2.begin(), v2.end(), v3.begin(), 16);
    copy(v3.begin(), v3.end(), out_it);

    cout << endl;

    vector<int> v4;
    for (it = v1.begin(); it != v1.end(); it++) {
        v4.push_back(*it);
    }
    for (it = v2.begin(); it != v2.end(); it++) {
        v4.push_back(*it);
    }
    copy(v4.begin(), v4.end(), out_it);

    cout << endl;

    cout << accumulate(v1.begin(), v1.end(), 0)<<endl;
    cout << accumulate(v2.begin(), v2.end(), 1, multiplies<int>());
    return 0;
}
